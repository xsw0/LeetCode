class nQueens
{
	size_t number;
	std::vector<size_t> board;
	vector<std::vector<size_t>> queens;

	void solve()
	{
		vector<bool> isValid(number, true);
		for (size_t row = 0; row < board.size(); ++row)
		{
			size_t col = board[row];
			size_t dis = board.size() - row;
			isValid[col] = false;
			if (col + dis < number)
			{
				isValid[col + dis] = false;
			}
			if (col >= dis)
			{
				isValid[col - dis] = false;
			}
		}
		for (size_t i = 0; i < number; ++i)
		{
			if (isValid[i])
			{
				board.emplace_back(i);
				if (board.size() == number)
				{
					queens.push_back(board);
				}
				else
				{
					solve();
				}
				board.pop_back();
			}
		}
	}

public:
	explicit nQueens(size_t number) : number(number)
	{
		solve();
	};

	vector<vector<string>> operator*() const
	{
		vector<vector<string>> result;
		result.reserve(queens.size());
		for (auto& v : queens)
		{
			vector<string> temp(number, string(number, '.'));
			for (size_t i = 0; i < number; ++i)
			{
				temp[i][v[i]] = 'Q';
			}
			result.push_back(temp);
		}
		return result;
	}
};

class Solution
{
public:
	vector<vector<string>> solveNQueens(int n)
	{
		// @formatter:off
		static const vector<vector<vector<string>>> result{
				{
						{},
						{{ "Q" }},
						{},
						{},
						{{ ".Q..", "...Q", "Q...", "..Q." }, { "..Q.", "Q...", "...Q", ".Q.." }},
						{{ "Q....", "..Q..", "....Q", ".Q...", "...Q." }, { "Q....", "...Q.", ".Q...", "....Q", "..Q.." }, { ".Q...", "...Q.", "Q....", "..Q..", "....Q" }, { ".Q...", "....Q", "..Q..", "Q....", "...Q." }, { "..Q..", "Q....", "...Q.", ".Q...", "....Q" }, { "..Q..", "....Q", ".Q...", "...Q.", "Q...." }, { "...Q.", "Q....", "..Q..", "....Q", ".Q..." }, { "...Q.", ".Q...", "....Q", "..Q..", "Q...." }, { "....Q", ".Q...", "...Q.", "Q....", "..Q.." }, { "....Q", "..Q..", "Q....", "...Q.", ".Q..." }},
						{{ ".Q....", "...Q..", ".....Q", "Q.....", "..Q...", "....Q." }, { "..Q...", ".....Q", ".Q....", "....Q.", "Q.....", "...Q.." }, { "...Q..", "Q.....", "....Q.", ".Q....", ".....Q", "..Q..." }, { "....Q.", "..Q...", "Q.....", ".....Q", "...Q..", ".Q...." }},
						{{ "Q......", "..Q....", "....Q..", "......Q", ".Q.....", "...Q...", ".....Q." }, { "Q......", "...Q...", "......Q", "..Q....", ".....Q.", ".Q.....", "....Q.." }, { "Q......", "....Q..", ".Q.....", ".....Q.", "..Q....", "......Q", "...Q..." }, { "Q......", ".....Q.", "...Q...", ".Q.....", "......Q", "....Q..", "..Q...." }, { ".Q.....", "...Q...", "Q......", "......Q", "....Q..", "..Q....", ".....Q." }, { ".Q.....", "...Q...", ".....Q.", "Q......", "..Q....", "....Q..", "......Q" }, { ".Q.....", "....Q..", "Q......", "...Q...", "......Q", "..Q....", ".....Q." }, { ".Q.....", "....Q..", "..Q....", "Q......", "......Q", "...Q...", ".....Q." }, { ".Q.....", "....Q..", "......Q", "...Q...", "Q......", "..Q....", ".....Q." }, { ".Q.....", ".....Q.", "..Q....", "......Q", "...Q...", "Q......", "....Q.." }, { ".Q.....", "......Q", "....Q..", "..Q....", "Q......", ".....Q.", "...Q..." }, { "..Q....", "Q......", ".....Q.", ".Q.....", "....Q..", "......Q", "...Q..." }, { "..Q....", "Q......", ".....Q.", "...Q...", ".Q.....", "......Q", "....Q.." }, { "..Q....", "....Q..", "......Q", ".Q.....", "...Q...", ".....Q.", "Q......" }, { "..Q....", ".....Q.", ".Q.....", "....Q..", "Q......", "...Q...", "......Q" }, { "..Q....", "......Q", ".Q.....", "...Q...", ".....Q.", "Q......", "....Q.." }, { "..Q....", "......Q", "...Q...", "Q......", "....Q..", ".Q.....", ".....Q." }, { "...Q...", "Q......", "..Q....", ".....Q.", ".Q.....", "......Q", "....Q.." }, { "...Q...", "Q......", "....Q..", ".Q.....", ".....Q.", "..Q....", "......Q" }, { "...Q...", ".Q.....", "......Q", "....Q..", "..Q....", "Q......", ".....Q." }, { "...Q...", ".....Q.", "Q......", "..Q....", "....Q..", "......Q", ".Q....." }, { "...Q...", "......Q", "..Q....", ".....Q.", ".Q.....", "....Q..", "Q......" }, { "...Q...", "......Q", "....Q..", ".Q.....", ".....Q.", "Q......", "..Q...." }, { "....Q..", "Q......", "...Q...", "......Q", "..Q....", ".....Q.", ".Q....." }, { "....Q..", "Q......", ".....Q.", "...Q...", ".Q.....", "......Q", "..Q...." }, { "....Q..", ".Q.....", ".....Q.", "..Q....", "......Q", "...Q...", "Q......" }, { "....Q..", "..Q....", "Q......", ".....Q.", "...Q...", ".Q.....", "......Q" }, { "....Q..", "......Q", ".Q.....", "...Q...", ".....Q.", "Q......", "..Q...." }, { "....Q..", "......Q", ".Q.....", ".....Q.", "..Q....", "Q......", "...Q..." }, { ".....Q.", "Q......", "..Q....", "....Q..", "......Q", ".Q.....", "...Q..." }, { ".....Q.", ".Q.....", "....Q..", "Q......", "...Q...", "......Q", "..Q...." }, { ".....Q.", "..Q....", "Q......", "...Q...", "......Q", "....Q..", ".Q....." }, { ".....Q.", "..Q....", "....Q..", "......Q", "Q......", "...Q...", ".Q....." }, { ".....Q.", "..Q....", "......Q", "...Q...", "Q......", "....Q..", ".Q....." }, { ".....Q.", "...Q...", ".Q.....", "......Q", "....Q..", "..Q....", "Q......" }, { ".....Q.", "...Q...", "......Q", "Q......", "..Q....", "....Q..", ".Q....." }, { "......Q", ".Q.....", "...Q...", ".....Q.", "Q......", "..Q....", "....Q.." }, { "......Q", "..Q....", ".....Q.", ".Q.....", "....Q..", "Q......", "...Q..." }, { "......Q", "...Q...", "Q......", "....Q..", ".Q.....", ".....Q.", "..Q...." }, { "......Q", "....Q..", "..Q....", "Q......", ".....Q.", "...Q...", ".Q....." }},
				}
		};
		// @formatter:on
		if (n < result.size())
		{
			return result[n];
		}
		else
		{
			return *nQueens(n);
		}
	}
};
